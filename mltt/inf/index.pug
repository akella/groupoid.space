extends ../../layout.pug

block title
    title Infinity

block content
    +header('//groupoid.space/groupoid.svg', 'Infinity Language', 'AST Specification as Inductive Constructions')
    article.main
        .exe
            section
                p.
                    The idea of Infinity Langauge came from the needs of unification and
                    arranging different calculuses as an extensions to the core of the
                    language with dependent types (or MLTT core). While been working on
                    distributed systems, data storages and stream processing, the core
                    two languages: pi calculus and stream calculus discovered to be
                    connected and being driven by a language with quantifiers as a primitives.
                p.
                    Infinity is a dependently typed language for stream processing,
                    distributed processing and text processing. We use Coq to prototype
                    the standard library including the theories needed to be able to
                    prove code invariants instead of testing them. Infinity is a source
                    to source translator that lets you use different languages at runtime:
                    Erlang, Rust, Clang, Futhark, Julia, etc.
                p.
                    Infinity language presents a solid and unified way of modeling inter-language
                    computations and inter-system communications within a single language with
                    compact core. We strive for utilizing parallel hardware such as GPU and
                    SSE/AVX SIMD instructions and providing a robust and verified distributed
                    environment with process and channels runtime.
                p.
                    Inf Language is built on top of CoC pure type system, predicative universes
                    and inductive constructions you may find in other MLTT provers like Lean, Coq,
                    Idris, Agda, and F*. As algebraїс prover, Inf supports <mark>data</mark>
                    and <mark>record</mark> polynomial functors as fundamental language
                    constructions implemented in a form of hygienic macros over the AST.
                    Everything in Infinity Language is encoded as inductive construction:
                    from the equality property up to process calculus.
                    Both Infinity language and its macrosystem are built using AST types,
                    described in this document.

            section.langf
                .langf__col
                    h2#syntax Language Extensions
                    code.
                        Require Import core.
                        Require Import homotopy.
                        Require Import pi.
                        Require Import stream.
                        Require Import effect.

                        Inductive MLTT := Pi:     MLTT   -> MLTT -> MLTT
                                        | Lam:    Binder -> MLTT -> MLTT
                                        | App:    MLTT   -> MLTT -> MLTT
                                        | Sigma:  MLTT   -> MLTT -> MLTT
                                        | Pair:   MLTT   -> MLTT -> MLTT
                                        | Fst:    MLTT   -> MLTT
                                        | Snd:    MLTT   -> MLTT
                                        | Where:  MLTT   -> Decls -> MLTT
                                        | Var:    Ident  -> MLTT
                                        | U:      MLTT
                                        | Con:    Label  -> list MLTT   -> MLTT
                                        | Split:  Loc    -> list Branch -> MLTT
                                        | Sum:    Binder -> NamedSum    -> MLTT      
                                        | HIT:    HomotopyCalculus -> MLTT
                                        | PI:     PiCalculus       -> MLTT
                                        | EFF:    EffectCalculus   -> MLTT
                                        | STREAM: StreamCalculus   -> MLTT.

                    h2#passes Compiler Passes
                    ol
                        li <a href='#macro'>INF</a> &mdash; Macro Expansion
                        li <a href='../om/#normal'>NORMAL</a> &mdash; Typechecking
                        li <a href='../om/#erased'>ERASE</a> &mdash; Type Information Erasure
                        li <a href='../om/#extract'>EXTRACT</a> &mdash; Extract VM Lambda

            section
                h1 Calculus
                p.
                    The type system is completely described by the PTS SAR notation, given by Barendregt.
                    Find more info in <a href='../om/#axioms'>Axioms and Inference Rules</a>
                    of underlying Om intermediate language.
                code.
                    record PTS: * :=
                           (S: ∀ (n: nat) → star n)
                           (A: ∀ (i: nat) → type i (succ i))
                           (R: ∀ (i: nat) → ∀ (j: nat)
                                          → pi i j (max i j))

            section
                h1 Macrosystem
                .macro
                    .macro__col
                        h3#om Om
                        ol
                            li: a(href='#function') LAMBDA
                            li: a(href='#function') PI
                            li: a(href='#application') APP
                            li: a(href='#var') VAR
                            li: a(href='#star') STAR
                    .macro__col
                        h3#macro Macro
                        ol
                            li: a(href='#data') DATA
                            li: a(href='#record') RECORD
                            li: a(href='#let') LET
                            li: a(href='#case') CASE
                    .macro__col
                        ol
                            h3#eff Effects
                            li: a(href='#process') SPAWN
                            li: a(href='#send') SEND
                            li: a(href='#receive') RECEIVE
                            li: a(href='#try') TRY
                            li: a(href='#raise') RAISE
                            li: a(href='#raise') DO

            section
                h2#om Om
                p.
                    <mark>Om</mark> language is the macrosystem terminal language.
                    Language forms of pure <mark>Macro</mark> or inpure <mark>Effect</mark>
                    types are expanded to the terminal language. For the details please refer to the <a href='/om'>Om Assembler</a> description.
                code.
                    data Om: * :=
                         (star: Star → Om)
                         (var: Var → Om)
                         (app: App → Om)
                         (arrow: Arrow → Om)
                         (pi: Pi → Om)

                h2#star Star
                code.
                    record Star: * :=
                           (index: nat)

                h2#var Variable
                code.
                    record Var: * :=
                           (name: string)

                h2#function Arrow / Pi
                code.
                    record Arrow Pi: * :=
                           (name: string)
                           (arg: Om)
                           (body: Om)

                h2#application Application
                code.
                    record App: * :=
                           (fun: Om)
                           (arg: Om)

                h2#macro Macro
                p.
                    <mark>Macro</mark> language subsystem is the core of Inf language and dedicated to compile the prelude desceibed in the <a href='/types'>Core Types</a> document. Om language is the target language of macroexpansions of <mark>data</mark> and <mark>record</mark> inductive constructions, <mark>let</mark> construction and univariable <mark>case</mark> pattern matching.
                code.
                    data Macro: * :=
                         (record: Record → Macro)
                         (data: Data → Macro)
                         (let: Let → Macro)
                         (case: Case → Macro)

                h2#case Case / Receive
                code.
                    record Case Receive: * :=
                           (of: Inf)
                           (legs: list (prod atom (prod Om Inf)))
                           (default: Inf)

                h2#let Let
                code.
                    record Let: * :=
                           (binds: list (prod string Inf))
                           (in: Inf)

                h2 <a name="data"><a name="record">Record / Data</a></a>
                code.
                    record Record Data: * :=
                           (name: string)
                           (base: Om)
                           (body: list (prod string Inf))

                h2#eff Effect
                p.
                    <mark>Effect</mark> syntax extensions defined basic process calculus axioms, IO and exception handling.
                code.
                    data Effect: * :=
                         (receive: Receive → Effect)
                         (spawn: Spawn → Effect)
                         (send: Send → Effect)
                         (try: Exception → Effect)
                         (raise: Exception → Effect)
                         (write: File → Effect)
                         (read: File → Effect)

                h2#process Process
                code.
                    record Process: (Sigma: *) → (X: *) → * :=
                           (action: Sigma → X → GenServer X)

                h2#spawn Spawn
                code.
                    record Spawn:
                           (proc: Process)
                           (raise: list Eff)

                h2#send Send
                code.
                    record Send: (Sigma: *) → * :=
                           (message: Sigma)
                           (to: Process Sigma)


