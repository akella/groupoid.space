extends ../../layout.pug

block title
    title INFINITY

block content
    +header('//groupoid.space/groupoid.svg', 'Infinity Language', 'MLTT Extensions')
    article.main
        .exe
            section

                h2 Introduction
                p.
                    The idea of Infinity Langauge came from the needs of unification and
                    arranging different calculuses as an extensions to the core of the
                    language with dependent types (or MLTT core). While been working on
                    distributed systems, data storages and stream processing, the core
                    two languages: pi calculus and stream calculus discovered to be
                    connected and being driven by a language with quantifiers as a primitives.
                    So we started to look forward for unificated typechecker.

                h2 Pure Type System
                p.
                    From the time Coquand at all discovered Calculus of Constructions,
                    and Barendregt systemized its variations, a Pure Type System theory
                    was developed. It is known also as Single Axiom System with
                    only Pi-Type of MLTT, represeting Functional Complentess.
                code.
                    data O<sub>1</sub> = U : nat → O<sub>1</sub>
                            | Var: Ident → O<sub>1</sub>
                            | App: O<sub>1</sub> → O<sub>1</sub> → O<sub>1</sub>
                            | Lambda: Binder → O<sub>1</sub> → O<sub>1</sub> → O<sub>1</sub>
                            | Arrow: O<sub>1</sub> → O<sub>1</sub> → O<sub>1</sub>
                            | Pi: name → O<sub>1</sub> → O<sub>1</sub> → O<sub>1</sub>

                h2 Contextual Completness
                p.
                    The basic Core primitive whish is needed for proving things
                    is MLTT Sigma-Type, representing Contextual Completness. This
                    is needed for building Sigma pairs, the carrier for the
                    carried records. Usually type checkers called Pi-Sigma provers as
                    it contains PTS encriched with Sigma primitive.
                code.
                    data O<sub>2</sub> = O<sub>1</sub>
                            | Sigma: name → O<sub>2</sub> → O<sub>2</sub> → O<sub>2</sub>
                            | Pair: O<sub>2</sub> → O<sub>2</sub> → O<sub>2</sub>
                            | Fst: O<sub>2</sub> → O<sub>2</sub>
                            | Snd: O<sub>2</sub> → O<sub>2</sub>

                h2 (Co)-Inductive Types
                p.
                    The further development of induction inside MLTT provers led to
                    theory of polynomial functors and well founded trees, known in
                    programming languages as inductive types with <mark>data</mark>
                    and <mark>record</mark> core primitives of type checker.

                h2 Higher Inductive Types
                p.
                    The fundamental development of equality inside MLTT provers
                    led us to notion of ∞-groupoid as spaces. In this was
                    Path identity type appeared in the core of type checker along
                    with de Morgan algebra on built-in interval type. Glue, unglue
                    composition and fill operations are also needed in the core for
                    the univalence computability.

            section.langf
                .langf__col
                    h2#syntax Language Extensions
                    code.
                        Require Import core.
                        Require Import homotopy.
                        Require Import pi.
                        Require Import stream.
                        Require Import effect.

                        Inductive MLTT := Pi:     MLTT   -> MLTT -> MLTT
                                        | Lam:    Binder -> MLTT -> MLTT
                                        | App:    MLTT   -> MLTT -> MLTT
                                        | Sigma:  MLTT   -> MLTT -> MLTT
                                        | Pair:   MLTT   -> MLTT -> MLTT
                                        | Fst:    MLTT   -> MLTT
                                        | Snd:    MLTT   -> MLTT
                                        | Where:  MLTT   -> Decls -> MLTT
                                        | Var:    Ident  -> MLTT
                                        | U:      MLTT
                                        | Con:    Label  -> list MLTT   -> MLTT
                                        | Split:  Loc    -> list Branch -> MLTT
                                        | Sum:    Binder -> NamedSum    -> MLTT
                                        | HIT:    HomotopyCalculus -> MLTT
                                        | PI:     PiCalculus       -> MLTT
                                        | EFF:    EffectCalculus   -> MLTT
                                        | STREAM: StreamCalculus   -> MLTT.

            section
                h1 Calculus
                p.
                    The type system is completely described by the PTS SAR notation, given by Barendregt.
                    Find more info in <a href='../om/#axioms'>Axioms and Inference Rules</a>
                    of underlying Om intermediate language.
                code.
                    record PTS: * :=
                           (S: ∀ (n: nat) → star n)
                           (A: ∀ (i: nat) → type i (succ i))
                           (R: ∀ (i: nat) → ∀ (j: nat)
                                          → pi i j (max i j))

