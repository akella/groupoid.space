extends ../layout.pug

block title
    title HNC

block content
    +header('/groupoid.svg', 'HNC', 'System F extraction to C++, Rust')
    article.main
        aside Andy Melnikov
            time 15 JAN 2017
        .intro
            h2#fpga System F Intermediate Language
            p.
                HNC is an optimizing source-to-source translator in the spirit of PureScript.
            p.
                Like PureScript, it is a call-by-value functional language with type inference,
                generating human-readable code in another high-level language.
            p.
                Unlike PureScript, it is designed to be used indirectly as a compiler backend
                to generate non-abstract non-functional loops with entirely stack-allocated
                temporaries from a more functional representation.
            p.
                <mark>System F Core.</mark>HNC input language is a non-recursive dialect of ML
                with call by value reduction, assignment, loops and  controlled effects.
                It is weak enough to be implemented without runtime boxing or heap-allocated closures.
            p.
                <mark>Readable Extraction.</mark> As such it is suitable to translation into
                languages without automatic heap
                memory management or even without generics such as plain C. The type system
                is a bare minimum to infer a fixed runtime representation of every variable,
                annotate types everywhere C++ wants them and take advantage of C++ standard
                template library. The C++ backend  is designed to be easily portable to
                both <b>static</b> and <b>dynamic</b> mainstream languages such as Java,
                C, C#, JavaScript or Python.
            code.
                    fold f x0 l =
                         x = x0
                         p = l
                         while *p != NULL
                             x := f x *p
                             p := p->next
                         x
                    x = fold (\x y -> x + y + 1) 0 l
            code.
                    int x = 0;
                    list_int *p = l;
                    while (*p != NULL)
                    {
                        x += y + 1;
                        p = p->next;
                    }
            p.
                <mark>Refined Optimizer</mark> HNC key ingredients are an optimizer using a nameless scopeless untyped
                control flow graph and scope, name and type reconstruction phase.
                HNC tries as much as possible to preserve the documentary structure
                of human-supplied identifiers in its input to generate meaningful
                human-understandable output in the spirit of PureScript.
            p.
                <mark>Minimal Codebase.</mark> The type inference algorithm should be as
                simple as possible and be ready for formal proof. HNC strive to escape from
                unneeded features relying on attribute grammars and generic programming.
            p.
                <mark>Hackability.</mark> HNC should be considered as a framework or
                lightweight System F core useful in other projects as a library.

            h2#passes Compiler Passes
        .status
            ol
                li <a href='#'>INF</a> &mdash; Infinity Language
                li <a href='#'>BASELIB</a> &mdash; Morte Library
                li <a href='#'>WEAK</a> &mdash; Weaking (pending)
                li <a href='#'>AST</a> &mdash; Implicitly Typed AST
                li <a href='#'>TYPE</a> &mdash; Typechecking
                li <a href='#'>FLOW</a> &mdash; Control Flow Graph
                li <a href='#'>SCOPE</a> &mdash; Name and Scope Reconstruction
                li <a href='#'>INFER</a> &mdash; Type Inference
                li <a href='#'>TARGET</a> &mdash; Target AST
                li <a href='#'>LLVM</a> &mdash; Clang/Rust Compiler
                li <a href='#'>NATIVE</a> &mdash; Native Executable
