extends ../../layout.pug

block title
    title HNC

block content
    +header('../../groupoid.svg', 'HN', 'HM extraction to C++, Rust')
    article.main
        aside Andy Melnikov
            time 15 JAN 2017
        .intro
            h2 Syntax
            p.
                To make code more human-readable HN disallows lambdas and requires
                all functions to be named.
                So the actual abstract syntax of HN0 is more complex:

            code.
                data LetIn a = Let (Definition a) (LetIn a)
                             | In (Expression a)

                data Definition a = Definition a [a] (LetIn a)
                                  | Assign a (LetIn a)
                                  | While Expression LetIn
                                  | If Expression LetIn LetIn

                data Expression a = Application (Expression a) [Expression a]
                                  | Atom a
                                  | Constant Const

                data Const = ConstString String
                           | ConstInt    Int
            h2#passes Optimizer
            p.
                Unlike many legacy-burdened compilers, HNC optimizer doesn't
                use peephole-style hand-ordered phases. Instead, it uses a
                novel algorithm of interleaved dataflow analysis and rewriting
                to make optimizer smaller, more modular and less fragile
                (Lerner et al &mdash; 2002).
            p.
                The algebraic approach lets HNC perform common optimizations
                such as dead code elimination, inlining, copy propagation,
                arity reduction in less than 500 lines of code specific to HNC.
                For the subtle algorithms for forward and backward flow traversal,
                interleaving, speculative rewrites and fixed point computation HNC
                uses HOOPL &mdash; a reusable component of the mature GHC
                compiler (Ramsey et al &mdash; 2010).


            h2#passes Compiler Passes
        .status
            ol
                li <a href='#'>INF</a> &mdash; Infinity Language
                li <a href='#'>BASELIB</a> &mdash; Morte Library
                li <a href='#'>WEAK</a> &mdash; Weaking (pending)
                li <a href='#'>AST</a> &mdash; Implicitly Typed AST
                li <a href='#'>TYPE</a> &mdash; Typechecking
                li <a href='#'>FLOW</a> &mdash; Control Flow Graph
                li <a href='#'>SCOPE</a> &mdash; Name and Scope Reconstruction
                li <a href='#'>INFER</a> &mdash; Type Inference
                li <a href='#'>TARGET</a> &mdash; Target AST
                li <a href='#'>LLVM</a> &mdash; Clang/Rust Compiler
                li <a href='#'>NATIVE</a> &mdash; Native Executable
