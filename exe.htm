<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>EXE</title>
    <link rel="stylesheet" href="5HT.css" />
</head>
<body>
<div class=menu>
<a href="index.html">groupoid.co</a><font color=silver>/exe</font>
</div>
<hr>
<div class=app>

<div class=block style="width:150px;height:350px;">
        <img src="Groupoid.svg" height=200 width=230>
</div>

<div class=block style="width:700px;height:0px;">

<center><h1>Exe Language</h1>
        <h5>Normal-form based compiler with Dependent Types</h5>

<h2><a name="syntax">Syntax</a></h2></center>

<pre  style="margin-left:150px;width:600px;">

     I := #identifier

     O := ∅ | ( O ) |
          □ | ∀ ( I : O ) → O |
          * | λ ( I : O ) → O |
          I | O → O | O O

     L := ∅ | L I

     A := ∅ | A ( L : O ) | A O

     F := ∅ | F ( I : O ) | ()

     P := I O , P | I O

     E := ∅ | E data L : A := F
            | E record L : A [ extend P ] := F
            | E let F in O
            | E case O [ | I O -> O ]
            | E receive O [ | I O -> O ]
            | E spawn O O raise L := O
            | E send O to O

</pre>

<h3><a name="passes">Compiler Passes</a></h3>

<blockquote>
<p>01 &nbsp;<a href="#data">EXE</a> &mdash; Macro Expansion</p>
<p>02 <a href="#record">NORMAL</a> &mdash; Typechecking and Normal Form Generation</p>
<p>03 <a href="#let">ERASE</a> &mdash; Type Information Erasure</p>
<p>04 <a href="#case">EXTRACT  </a> &mdash; Extract VM Lambda</p>
</blockquote>

<h2><a name="bool">Exe Language</a></h2>

<pre style="width:400px;">

    data Exe: * :=
         (om: Om → Exe)
         (core: Macro → Exe)
         (eff: Effect → Exe)

</pre>

<div class=block style="width:900px;margin-top:20px;">

<div class=block>

<h3><a href="#om">Om</a></h3>

<blockquote>
<p>01 <a href="#lambda">LAMBDA</a></p>
<p>02 <a href="#pi">PI</a></p>
<p>03 &nbsp;<a href="#app">APP</a></p>
<p>04 <a href="#var">VAR</a></p>
<p>05 <a href="#star">STAR</a></p>
</blockquote>

</div>

<div class=block>

<h3><a href="#pure">Macro</a></h3>

<blockquote>
<p>01 &nbsp;<a href="#data">DATA</a></p>
<p>02 <a href="#record">RECORD</a></p>
<p>03 <a href="#let">LET</a></p>
<p>04 <a href="#case">CASE</a></p>
</blockquote>

</div>

<div class=block>

<h3><a href="#eff">Effects</a></h3>

<blockquote>
<p>01 &nbsp;<a href="#spawn">SPAWN</a></p>
<p>02 <a href="#send">SEND</a></p>
<p>03 <a href="#receive">RECEIVE</a></p>
<p>04 <a href="#try">TRY</a></p>
<p>05 <a href="#raise">RAISE</a></p>
<p>06 <a href="#raise">DO</a></p>
</blockquote>

</div>


</div>

<h3>AST Constructors</h3>
<code>
Exe.om.star
Exe.om.var
Exe.om.arrow
Exe.om.pi
Exe.om.app
Exe.core.data
Exe.core.record
Exe.core.case
Exe.core.let
Exe.eff.spawn
Exe.eff.send
Exe.eff.receive
Exe.eff.try
Exe.eff.raise
Exe.eff.do
</code>


<h2><a name="om">CoC Language</a></h2>

<pre  style="width:500px;">

    data Om: * :=
         (star: nat → Om)
         (var: string → Om)
         (app: Om → Om → Om)
         (arrow: string → Om → Om → Om)
         (pi: name → Om → Om → Om)

</pre>


<h2><a name="pure">Pure Macro Extensions</a></h2>

<pre style="width:500px;">

    data Macro: * :=
         (record: Record → Macro)
         (data: Data → Macro)
         (let: Let → Macro)
         (case: Case → Macro)

</pre>

<h2><a name="eff">Effects Extensions</a></h2>

<pre style="width:500px;">

    data Effect: * :=
         (receive: Receive → Effect)
         (spawn: Process → Effect)
         (send: * → Process → Effect)
         (try: Exception → Effect)
         (raise: Exception → Effect)
         (write: File → Effect)
         (read: File → Effect)

</pre>

<h2><a name="case">Case / Receive</a></h2>

<pre style="width:600px;">

  record Case Receive: * :=
         (legs: list (prod string (prod Om Exe)))
         (default: Exe)

</pre>

<h2><a name="let">Let</a></h2>

<pre style="width:500px;">

  record Let: * :=
         (binds: list (prod string Om))
         (in: Exe)

</pre>

<h2><a name="data"><a name="record">Record / Data</a></a></h2>

<pre style="width:500px;">

  record Record Data: * :=
         (name: string)
         (base: Om)
         (body: list (prod string Om))

</pre>

<h2><a name="spawn">Process</a></h2>

<pre  style="width:700px;">

  record Eff: * := (in: exe) (out: exe)
  record Process: (Sigma: *) → (X: *) → * :=
         (effect: list Eff)
         (action: Sigma → X → X)

</pre>

<h2><a name="send">Send</a></h2>

<pre style="width:500px;">

  record Send: * :=
         (msg: *)
         (dst: Process)

</pre>



<h1>Resources</h1>

<p>01 &nbsp;<a href="https://gitter.im/groupoid/exe/archives/">EXE ARCHIVES</a></p>
<p>02 &nbsp;<a href="https://github.com/groupoid/exe">GIT SOURCES</a></p>

<center style="margin-top: 120px;margin-bottom:60px;"><img style="margin-bottom:-20px;" src="Stamp.svg" width=50>2016 &copy; Groupoid Infinity, Inc.</center>

</div>

</div>
</body>
</html>
